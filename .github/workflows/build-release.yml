name: Build Release

permissions:
  contents: write  # 需要写权限来提交文件到 repo

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'caddy version to build (use "latest" for the latest release)'
        required: false
        default: "latest"
  schedule:
    - cron: "0 0 * * *"

jobs:
  check_caddy_release:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.compare_release.outputs.new_release }}
      caddy_version: ${{ steps.get_caddy_version.outputs.caddy_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，以便后续提交

      - name: Get Caddy version
        id: get_caddy_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version }}" != "latest" ]; then
            # 使用手动指定的版本
            CADDY_VERSION="${{ github.event.inputs.version }}"
            echo "Using specified Caddy version: $CADDY_VERSION"
          else
            # 获取最新版本
            CADDY_VERSION=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | jq -r .tag_name)
            echo "Latest Caddy version: $CADDY_VERSION"
          fi
          echo "caddy_version=$CADDY_VERSION" >> $GITHUB_OUTPUT

      - name: Compare with previous release
        id: compare_release
        run: |
          if [ -f "caddy-version.txt" ]; then
            PREVIOUS_VERSION=$(cat caddy-version.txt)
          else
            PREVIOUS_VERSION="NONE"
          fi
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: ${{ steps.get_caddy_version.outputs.caddy_version }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # 手动触发时始终构建
            echo "Manual trigger detected, forcing build."
            echo "new_release=true" >> $GITHUB_OUTPUT
          elif [ "${{ steps.get_caddy_version.outputs.caddy_version }}" != "$PREVIOUS_VERSION" ]; then
            echo "New Caddy release detected!"
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "No new release."
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
  
      - name: Update version file in repo
        if: steps.compare_release.outputs.new_release == 'true'
        run: |
          NEW_VERSION="${{ steps.get_caddy_version.outputs.caddy_version }}"
          # 更新前先写入文件
          echo "$NEW_VERSION" > caddy-version.txt
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add caddy-version.txt
          # 如果文件内容确实有变化，再 commit
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update caddy version to $NEW_VERSION"
            git push
          else
            echo "No changes detected in version file, skipping commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  


  build:
    needs: check_caddy_release
    if: needs.check_caddy_release.outputs.new_release == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, amd64v3, arm64]
      fail-fast: true  # 添加 fail-fast 策略，如果一个构建失败，其他任务会被取消
    outputs:
      version: ${{ steps.setup.outputs.version }}
    env:
      GO111MODULE: "on"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"
          cache: true # 启用Go模块缓存

      - name: Install xcaddy and determine version (parallel)
        id: setup
        run: |
          # 并行安装 xcaddy 和获取版本
          (go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest) &
          XCADDY_PID=$!
          
          # 获取版本信息
          LATEST_VERSION="${{ needs.check_caddy_release.outputs.caddy_version }}"
          echo "caddy version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # 等待 xcaddy 安装完成
          wait $XCADDY_PID
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Build Custom caddy Binary
        run: |
          OUTPUT_FILE="caddy-${{ matrix.arch }}"  # 保持文件名与 artifact 名称一致
          
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            xcaddy build ${{ steps.setup.outputs.version }} \
              --with github.com/mholt/caddy-l4@latest \
              --output $OUTPUT_FILE
          elif [ "${{ matrix.arch }}" = "amd64v3" ]; then
            GOAMD64=v3 xcaddy build ${{ steps.setup.outputs.version }} \
              --with github.com/mholt/caddy-l4@latest \
              --output $OUTPUT_FILE
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            GOARCH=arm64 xcaddy build ${{ steps.setup.outputs.version }} \
              --with github.com/mholt/caddy-l4@latest \
              --output $OUTPUT_FILE
          else
            echo "Unsupported architecture"
            exit 1
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: caddy-${{ matrix.arch }}
          path: |
            caddy-${{ matrix.arch }}
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release with Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ format('{0}-{1}', needs.build.outputs.version, github.run_id) }}
          name: "${{ needs.build.outputs.version }} (Build ${{ github.run_id }})"
          body: "Build triggered by Caddy release ${{ needs.build.outputs.version }}"
          files: |
            artifacts/caddy-amd64/caddy-amd64
            artifacts/caddy-amd64v3/caddy-amd64v3
            artifacts/caddy-arm64/caddy-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
